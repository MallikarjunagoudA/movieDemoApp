// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using movieDemoApp;

#nullable disable

namespace movieDemoApp.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CinemaHallMovie", b =>
                {
                    b.Property<int>("cinemaHallsId")
                        .HasColumnType("int");

                    b.Property<int>("cinemasId")
                        .HasColumnType("int");

                    b.HasKey("cinemaHallsId", "cinemasId");

                    b.HasIndex("cinemasId");

                    b.ToTable("CinemaHallMovie", (string)null);
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("cinemasId")
                        .HasColumnType("int");

                    b.Property<int>("genresId")
                        .HasColumnType("int");

                    b.HasKey("cinemasId", "genresId");

                    b.HasIndex("genresId");

                    b.ToTable("GenreMovie", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biograpy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("actors", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Point>("location")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("cinemas", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.CinemaHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CinemaHallTypes")
                        .HasColumnType("int");

                    b.Property<int>("cinemaid")
                        .HasColumnType("int");

                    b.Property<decimal>("cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("cinemaid");

                    b.ToTable("cinemaHalls", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.CinemaOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Begin")
                        .HasColumnType("Date");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId")
                        .IsUnique();

                    b.ToTable("cinemaOffers", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("InCinemas")
                        .HasColumnType("bit");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("RelaseDate")
                        .HasColumnType("Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("movieDemoApp.Entities.MovieActor", b =>
                {
                    b.Property<int>("movieid")
                        .HasColumnType("int");

                    b.Property<int>("actorid")
                        .HasColumnType("int");

                    b.Property<string>("character")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.HasKey("movieid", "actorid");

                    b.HasIndex("actorid");

                    b.ToTable("movieActors", (string)null);
                });

            modelBuilder.Entity("CinemaHallMovie", b =>
                {
                    b.HasOne("movieDemoApp.Entities.CinemaHall", null)
                        .WithMany()
                        .HasForeignKey("cinemaHallsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movieDemoApp.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("cinemasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("movieDemoApp.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("cinemasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movieDemoApp.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("genresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("movieDemoApp.Entities.CinemaHall", b =>
                {
                    b.HasOne("movieDemoApp.Entities.Cinema", "cinema")
                        .WithMany("cinemaHalls")
                        .HasForeignKey("cinemaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinema");
                });

            modelBuilder.Entity("movieDemoApp.Entities.CinemaOffer", b =>
                {
                    b.HasOne("movieDemoApp.Entities.Cinema", null)
                        .WithOne("cinemaOffer")
                        .HasForeignKey("movieDemoApp.Entities.CinemaOffer", "CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("movieDemoApp.Entities.MovieActor", b =>
                {
                    b.HasOne("movieDemoApp.Entities.Actor", "actor")
                        .WithMany("movieActors")
                        .HasForeignKey("actorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movieDemoApp.Entities.Movie", "movie")
                        .WithMany("movieActors")
                        .HasForeignKey("movieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("movieDemoApp.Entities.Actor", b =>
                {
                    b.Navigation("movieActors");
                });

            modelBuilder.Entity("movieDemoApp.Entities.Cinema", b =>
                {
                    b.Navigation("cinemaHalls");

                    b.Navigation("cinemaOffer");
                });

            modelBuilder.Entity("movieDemoApp.Entities.Movie", b =>
                {
                    b.Navigation("movieActors");
                });
#pragma warning restore 612, 618
        }
    }
}
